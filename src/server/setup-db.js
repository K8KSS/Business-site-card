import pg from 'pg';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const { Pool } = pg;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres',
  database: process.env.DB_NAME || 'music_teacher_website',
});

console.log('üóÑÔ∏è  Creating PostgreSQL database...');
console.log(`üìç Connecting to: ${process.env.DB_HOST || 'localhost'}:${process.env.DB_PORT || '5432'}`);
console.log(`üë§ User: ${process.env.DB_USER || 'postgres'}`);
console.log(`üì¶ Database: ${process.env.DB_NAME || 'music_teacher_website'}`);

async function setupDatabase() {
  let client;
  try {
    client = await pool.connect();
  } catch (error) {
    console.error('\n‚ùå Cannot connect to PostgreSQL!');
    console.error('\nPossible reasons:');
    console.error('1. PostgreSQL is not running');
    console.error('2. Wrong password in server/.env file');
    console.error('3. Database does not exist yet');
    console.error('\nCurrent password in .env:', process.env.DB_PASSWORD || 'postgres');
    console.error('\nTo fix:');
    console.error('- Check server/.env file');
    console.error('- Change DB_PASSWORD to your PostgreSQL password');
    console.error('- Make sure PostgreSQL service is running\n');
    throw error;
  }
  
  try {
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü (–¥–ª—è —á–∏—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
    console.log('\nüóëÔ∏è  Dropping existing tables...');
    await client.query(`
      DROP TABLE IF EXISTS photos CASCADE;
      DROP TABLE IF EXISTS messages CASCADE;
      DROP TABLE IF EXISTS reviews CASCADE;
      DROP TABLE IF EXISTS videos CASCADE;
      DROP TABLE IF EXISTS audio CASCADE;
      DROP TABLE IF EXISTS portfolio CASCADE;
      DROP TABLE IF EXISTS achievements CASCADE;
      DROP TABLE IF EXISTS albums CASCADE;
      DROP TABLE IF EXISTS publications CASCADE;
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    console.log('üìù Creating tables...');
    
    await client.query(`
      CREATE TABLE publications (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT,
        category TEXT,
        image TEXT,
        file_url TEXT,
        cover TEXT,
        views INTEGER DEFAULT 0,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE albums (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        cover TEXT,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE photos (
        id SERIAL PRIMARY KEY,
        album_id INTEGER NOT NULL,
        url TEXT NOT NULL,
        FOREIGN KEY (album_id) REFERENCES albums(id) ON DELETE CASCADE
      );

      CREATE TABLE achievements (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        year INTEGER,
        type TEXT,
        icon TEXT,
        color TEXT
      );

      CREATE TABLE portfolio (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        organization TEXT,
        category TEXT,
        image TEXT,
        views INTEGER DEFAULT 0,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE reviews (
        id SERIAL PRIMARY KEY,
        author TEXT NOT NULL,
        role TEXT,
        text TEXT NOT NULL,
        rating INTEGER DEFAULT 5,
        status TEXT DEFAULT 'pending',
        likes INTEGER DEFAULT 0,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE messages (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        email TEXT NOT NULL,
        phone TEXT,
        subject TEXT,
        message TEXT NOT NULL,
        status TEXT DEFAULT 'new',
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE audio (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        artist TEXT,
        category TEXT,
        file_url TEXT,
        cover TEXT,
        duration TEXT DEFAULT '0:00'
      );

      CREATE TABLE videos (
        id SERIAL PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT,
        category TEXT,
        thumbnail TEXT,
        video_url TEXT,
        vk_iframe TEXT,
        duration TEXT DEFAULT '0:00',
        views INTEGER DEFAULT 0,
        hidden INTEGER DEFAULT 0,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    console.log('‚úÖ Tables created');

    // –í—Å—Ç–∞–≤–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    console.log('üìù Adding demo data...');

    // –ü—É–±–ª–∏–∫–∞—Ü–∏–∏
    await client.query(`
      INSERT INTO publications (title, description, category, image, date, views) VALUES
      ('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å–µ–Ω–Ω–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ''–ó–æ–ª–æ—Ç–∞—è –æ—Å–µ–Ω—å''', '–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å—Ç–∞—Ä—à–µ–π –≥—Ä—É–ø–ø—ã –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞ —Å –ø–µ—Å–Ω—è–º–∏, —Ç–∞–Ω—Ü–∞–º–∏ –∏ –∏–≥—Ä–∞–º–∏ –Ω–∞ –æ—Å–µ–Ω–Ω—é—é —Ç–µ–º–∞—Ç–∏–∫—É.', 'scenarios', 'https://images.unsplash.com/photo-1576495350482-942cde5fb23b?w=400', '2024-09-15', 245),
      ('–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —á—É–≤—Å—Ç–≤–∞ —Ä–∏—Ç–º–∞', '–ü–æ–¥–±–æ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —á—É–≤—Å—Ç–≤–∞ —Ä–∏—Ç–º–∞ —É –¥–æ—à–∫–æ–ª—å–Ω–∏–∫–æ–≤.', 'music', 'https://images.unsplash.com/photo-1579102072861-c31d565c0903?w=400', '2024-08-22', 189),
      ('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: –ú—É–∑—ã–∫–∞ –≤ –∂–∏–∑–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π –∏ –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º—É–∑—ã–∫–µ –¥–æ–º–∞.', 'parents', 'https://images.unsplash.com/photo-1601339434203-130259102db6?w=400', '2024-07-10', 312),
      ('–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞ –≤ –º—É–∑—ã–∫–∞–ª—åÔøΩÔøΩ–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–ú–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å–µ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.', 'health', 'https://images.unsplash.com/photo-1548206328-a50e7afafc6f?w=400', '2024-06-05', 156),
      ('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–∫ ''–í–æ–ª—à–µ–±—Å—Ç–≤–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞''', '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —É—á–∞—Å—Ç–∏–µ–º –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞, –°–Ω–µ–≥—É—Ä–æ—á–∫–∏ –∏ —Å–∫–∞–∑–æ—á–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.', 'scenarios', 'https://images.unsplash.com/photo-1576495350482-942cde5fb23b?w=400', '2023-12-01', 421)
    `);

    // –ê–ª—å–±–æ–º—ã
    await client.query(`
      INSERT INTO albums (title, cover, date) VALUES
      ('–û—Å–µ–Ω–Ω–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ 2024', 'https://images.unsplash.com/photo-1576495350482-942cde5fb23b?w=400', '2024-10-15'),
      ('–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è', 'https://images.unsplash.com/photo-1579102072861-c31d565c0903?w=400', '2024-09-20'),
      ('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–∫', 'https://images.unsplash.com/photo-1601339434203-130259102db6?w=400', '2023-12-25')
    `);

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await client.query(`
      INSERT INTO achievements (title, year, type, icon, color) VALUES
      ('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞–π–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ ''–õ—É—á—à–∏–π –ø–µ–¥–∞–≥–æ–≥ –≥–æ–¥–∞''', 2024, 'personal', 'Trophy', 'from-yellow-400 to-orange-500'),
      ('1 –º–µ—Å—Ç–æ –≤–æ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫', 2023, 'professional', 'Award', 'from-blue-400 to-purple-500'),
      ('–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', 2023, 'personal', 'Star', 'from-pink-400 to-red-500')
    `);

    // –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    await client.query(`
      INSERT INTO portfolio (title, organization, category, image, date, views) VALUES
      ('–î–∏–ø–ª–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ ''–õ—É—á—à–∏–π –ø–µ–¥–∞–≥–æ–≥ –≥–æ–¥–∞ 2024''', '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã', '–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ', 'https://images.unsplash.com/photo-1715000968071-e3b0068c718d?w=400', '2024-05-20', 245),
      ('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', '–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–§', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', 'https://images.unsplash.com/photo-1715000968071-e3b0068c718d?w=400', '2023-11-15', 189)
    `);

    // –û—Ç–∑—ã–≤—ã
    await client.query(`
      INSERT INTO reviews (author, role, text, rating, status, likes, date) VALUES
      ('–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞', '–ú–∞–º–∞ –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–∏–∫–∞', '–ï–ª–µ–Ω–∞ –Æ—Ä—å–µ–≤–Ω–∞ - –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ–¥–∞–≥–æ–≥! –ú–æ—è –¥–æ—á–∫–∞ —Å —Ä–∞–¥–æ—Å—Ç—å—é –∏–¥–µ—Ç –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.', 5, 'approved', 12, '2024-10-10'),
      ('–ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞', '–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å', '–†–∞–±–æ—Ç–∞—Ç—å —Å –ï–ª–µ–Ω–æ–π –Æ—Ä—å–µ–≤–Ω–æ–π –æ–¥–Ω–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞.', 5, 'approved', 8, '2024-09-25'),
      ('–û–ª—å–≥–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞', '–ú–∞–º–∞ –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–∏–∫–∞', '–ú–æ–π —Å—ã–Ω —Å—Ç–∞–ª –≥–æ—Ä–∞–∑–¥–æ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –≤ —Å–µ–±–µ –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏–π —Å –ï–ª–µ–Ω–æ–π –Æ—Ä—å–µ–≤–Ω–æ–π.', 5, 'approved', 15, '2024-08-15')
    `);

    // –ê—É–¥–∏–æ
    await client.query(`
      INSERT INTO audio (title, artist, category, duration) VALUES
      ('–û—Å–µ–Ω–Ω—è—è –ø–µ—Å–µ–Ω–∫–∞', '–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', '–î–µ—Ç—Å–∫–∏–µ –ø–µ—Å–Ω–∏', '2:45'),
      ('–í–µ—Å–µ–ª–∞—è –∑–∞—Ä—è–¥–∫–∞', '–†–∏—Ç–º–∏–∫–∞', '–§–∏–∑–º–∏–Ω—É—Ç–∫–∏', '3:12'),
      ('–ö–æ–ª—ã–±–µ–ª—å–Ω–∞—è', '–†–µ–ª–∞–∫—Å–∞—Ü–∏—è', '–£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∞—è –º—É–∑—ã–∫–∞', '4:30')
    `);

    // –í–∏–¥–µ–æ
    await client.query(`
      INSERT INTO videos (title, description, category, thumbnail, duration, views, date) VALUES
      ('–û—Å–µ–Ω–Ω–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ 2024 - –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å', '–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ—Ç–µ–π —Å—Ç–∞—Ä—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–µ–Ω–Ω–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–µ', '–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', 'https://images.unsplash.com/photo-1576495350482-942cde5fb23b?w=400', '15:30', 342, '2024-10-15'),
      ('–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: –†–∞–∑–≤–∏—Ç–∏–µ —Ä–∏—Ç–º–∞', '–ú–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é —á—É–≤—Å—Ç–≤–∞ —Ä–∏—Ç–º–∞', '–ó–∞–Ω—è—Ç–∏—è', 'https://images.unsplash.com/photo-1579102072861-c31d565c0903?w=400', '8:45', 215, '2024-09-20')
    `);

    console.log('‚úÖ Demo data added');
    console.log('üéâ Database successfully created and filled!');
    console.log('üìç Database name: ' + (process.env.DB_NAME || 'music_teacher_website'));
    
  } catch (error) {
    console.error('\n‚ùå Error creating database tables:', error.message);
    throw error;
  } finally {
    if (client) client.release();
    await pool.end();
  }
}

setupDatabase()
  .then(() => {
    console.log('\n‚úÖ Setup completed successfully!');
    console.log('\nYou can now start the server with:');
    console.log('  cd server');
    console.log('  node index.js\n');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Setup failed!');
    console.error('\nPlease check the error above and:');
    console.error('1. Make sure PostgreSQL is running');
    console.error('2. Check password in server/.env file');
    console.error('3. Make sure database exists (run setup-database.bat first)\n');
    process.exit(1);
  });
